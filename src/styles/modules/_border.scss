@charset "UTF-8";

@function getBorderItemValue($item, $index) {
  @if (type-of($item) == list) {
    @if ($index > length($item)) {
      $index: 1;
    }
    @return nth($item, $index);
  } @else {
    @return $item;
  }
}

@function is-percentage($value) {
  @return type-of($value) == number and unit($value) == "%";
}

@mixin border-radius($radius: 0, $ratio: 1) {
  $border-radius-corner: (top-left, top-right, bottom-right, bottom-left);

  @if (type-of($radius) == list) {
    @for $i from 1 through length($radius) {
      $item: nth($radius, $i);
      $corner: nth($border-radius-corner, $i);

      @if $ratio == 1 or is-percentage($item) {
        border-#{$corner}-radius: $item;
      } @else {
        border-#{$corner}-radius: $item * $ratio;
      }
    }
  } @else {
    @if $ratio == 1 or is-percentage($radius) {
      border-radius: $radius;
    } @else {
      border-radius: $radius * $ratio;
    }
  }
}

@mixin border(
  $direction: all,
  $size: 1px,
  $style: solid,
  $color: #ddd,
  $position: relative,
  $radius: 0
) {
  @if $direction == all or type-of($direction) == list {
    @media not screen and (-webkit-min-device-pixel-ratio: 2) {
      @include border-radius($radius);

      @if $direction == all {
        border: $size $style $color;
      } @else {
        @for $i from 1 through length($direction) {
          $item: nth($direction, $i);

          border-#{$item}: getBorderItemValue($size, $i)
            getBorderItemValue($style, $i)
            getBorderItemValue($color, $i);
        }
      }
    }

    @media only screen and (-webkit-min-device-pixel-ratio: 2) {
      @include border-multiple(
        $direction: $direction,
        $size: $size,
        $color: $color,
        $position: $position,
        $radius: $radius
      );
    }
  } @else {
    @media not screen and (-webkit-min-device-pixel-ratio: 2) {
      border-#{$direction}: $size $style $color;
    }

    @media only screen and (-webkit-min-device-pixel-ratio: 2) {
      @include border-single(
        $direction: $direction,
        $size: $size,
        $color: $color,
        $position: $position
      );
    }
  }
}

@mixin border-single(
  $direction: bottom,
  $size: 1px,
  $color: #ddd,
  $position: relative
) {
  position: $position;

  &:after {
    content: "";
    position: absolute;
    #{$direction}: 0;

    pointer-events: none;
    background-color: $color;

    @media only screen and (-webkit-min-device-pixel-ratio: 2) {
      -webkit-transform-origin: 0 0;
      transform-origin: 0 0;
    }

    @if ($direction == top or $direction == bottom) {
      left: 0;
      width: 100%;
      height: $size;

      @media only screen and (-webkit-device-pixel-ratio: 2) {
        -webkit-transform: scaleY(0.5);
        transform: scaleY(0.5);
      }

      @media only screen and (-webkit-device-pixel-ratio: 3) {
        -webkit-transform: scaleY(0.333333333333);
        transform: scaleY(0.333333333333);
      }
    } @else if ($direction == left or $direction == right) {
      top: 0;
      width: $size;
      height: 100%;

      @media only screen and (-webkit-device-pixel-ratio: 2) {
        -webkit-transform: scaleX(0.5);
        transform: scaleX(0.5);
      }

      @media only screen and (-webkit-device-pixel-ratio: 3) {
        -webkit-transform: scaleX(0.333333333333);
        transform: scaleX(0.333333333333);
      }
    }
  }
}

@mixin border-multiple(
  $direction: all,
  $size: 1px,
  $color: #ddd,
  $position: relative,
  $radius: 0
) {
  position: $position;

  @include border-radius($radius);

  &:after {
    content: "";
    position: absolute;
    top: 0;
    left: 0;
    pointer-events: none;
    box-sizing: border-box;
    transform-origin: top left;

    @media only screen and (-webkit-device-pixel-ratio: 2) {
      width: 200%;
      height: 200%;

      @include border-radius($radius, 2);
      -webkit-transform: scale(0.5, 0.5);
      transform: scale(0.5, 0.5);
    }

    @media only screen and (-webkit-device-pixel-ratio: 3) {
      width: 300%;
      height: 300%;

      @include border-radius($radius, 3);
      -webkit-transform: scale(0.333333333333, 0.333333333333);
      transform: scale(0.333333333333, 0.333333333333);
    }

    @if $direction == all {
      border: $size solid $color;
    } @else {
      @for $i from 1 through length($direction) {
        $item: nth($direction, $i);
        border-#{$item}: getBorderItemValue($size, $i)
          solid
          getBorderItemValue($color, $i);
      }
    }
  }
}
